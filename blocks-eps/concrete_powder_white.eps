%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (concrete_powder_white.eps)
%%CreationDate: (2021-09-18T16:32:01-04:00)
%%BoundingBox: -0 -0 16 16
%%HiResBoundingBox: 0 0 16 16
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 16 16
userdict begin
DisplayImage
0 0
16 16
12
16 16
0
0
E0E2E2E6E8E8E4E6E6DDE0E0E2E4E4DFE0E1E0E2E2E8E9E9DFE2E2DADDDED9DCDCD8DCDDEEEEEE
F0F1F1D8DADBE4E5E5E7E8E8E1E2E3EAEBEBEEEFEFCBCECFE9E9E9D4D8D8D6D9DAE2E4E5DCDFDF
F9F9F9DCDFDFECEDEDDFE0E1DCDFDFF2F2F2F3F3F3F0F1F1F3F4F5DFE1E1DFE0E1E8E8E9E3E4E5
E2E4E4E6E7E7E3E5E6E4E6E6F1F1F2DBDDDDE1E3E3E6E7E7E9EBECD8D9DAE6E7E8D8DADAE6E7E7
E0E2E2DADDDDDFE1E1EDEDEECACDCED9DCDCEAEAEAE0E2E2EEEFEFE9EBEBE1E3E4D2D4D4EDEDED
DBDDDEEAECECE8E9E9E8EAEAE1E4E4F1F2F2E8EAEADFE1E1E2E2E3E0E2E2F2F3F3ECEDEDE7E7E7
F0F1F1DBDCDDD8DADAE0E2E2DCDFDFF6F7F7DBDCDDE4E5E6E4E5E6DBDDDEE0E2E2E1E3E4E7E8E8
D8DADAD6D8D9D3D6D7DADDDDE2E3E3CED2D2E6E7E7DCDEDEE7E9E9E1E2E2EAEBEBD8DADBE4E5E5
E2E4E4E1E2E3E2E5E6F5F6F6E0E2E2E0E2E3EEEFEFE7E8E8DFE0E1DFE2E2E3E6E6D8DBDCE9EAEA
E5E6E6F2F3F3E6E8E9E1E2E3DDDFDFDCDEDFD6D9DADEE0E0DFE1E1E7EAEAF2F2F2E0E2E2EFF0F0
EDEEEEE5E7E8ECEDEDDBDEDEE7E9E9DADDDED8DADBF6F7F8D6D8D8DEE0E1E1E2E3E8EAEAE2E4E4
DFE0E1D7D9D9DFE1E2EBEDEDE6E7E7F0F0F0DCDEDFE0E2E2D8DADBE2E4E4DDDFE0F0F0F0EBEDED
E8E9E9EAEBECE1E3E3E7E8E8E2E4E4E2E4E4DADADAE4E6E6D3D5D6E6E8E8DCDEDFE2E4E5E3E6E6
E3E6E6EBEBEBDCDFDFE4E6E6FDFDFDE2E4E4DEDFE0D4D8D8E6E7E8E4E6E6E6E7E7DCDFDFDFE2E2
E9EAEADBDDDDDFE0E1E8EAEAE8E9E9F3F4F4D8DADBE0E2E2E1E2E2D8DADAECEEEEDFE1E2D6D8D9
E7E9EAE1E2E3DFE1E2DFE2E2CFD1D2DADCDCE2E4E4E0E2E2D8DBDCE3E5E6EBECEDD5D7D8DDDFE0
DCDFE0E1E3E4D2D4D5CACECED9DBDCE4E6E6DCDFDFE6E8E9E6E7E7E8EAEADFE2E2E2E4E4DFE2E2
D8DADBEBEDEDEEEEEEDFE2E2E0E2E3DBDCDDE0E2E2DBDEDFD8DBDBEAEBEBE1E3E3DBDDDDF1F1F1
D6D8D8DCDEDFE4E5E6D4D7D7D8DADAE2E4E4DFE1E1E1E3E4E1E3E3D4D7D7F1F3F3E9EAEAD4D6D6
E4E6E6DFE1E2E4E6E7D7DADADEDFE0DFE1E2DCDFE0E6E7E8D3D5D5

end
%%PageTrailer
%%Trailer
%%EOF
